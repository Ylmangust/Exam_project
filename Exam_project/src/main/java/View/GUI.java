/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package View;

import java.time.format.*;
import java.util.*;
import java.util.Date;
import javax.swing.*;
import javax.swing.table.*;
import Controller.Controller;
import Model.*;
import Model.enums.*;
import Model.databaseEntities.*;
import java.awt.Dimension;
import java.awt.event.MouseEvent;
import java.io.File;
import java.net.URISyntaxException;
import java.time.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.stream.Collectors;
import javax.swing.filechooser.FileNameExtensionFilter;
import mephi.b22901.exam_project.Exam_project;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.data.gantt.*;
import org.jfree.data.time.SimpleTimePeriod;

/**
 *
 * @author Регина
 */
public class GUI extends javax.swing.JFrame {

    private final Controller controller;
    private User currentUser;
    private DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd");
    private DateTimeFormatter formatterWithTime = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm");
    private List<ProjectTask> taskListToShow;
    private ProjectTask currentTaskToShow;
    private String currentTasksTable = "userTasks";
    private final DefaultTableModel projectsTableModel;
    private String dir;

    public GUI(Controller ctrl) {
        this.controller = ctrl;
        projectsTableModel = new DefaultTableModel(new String[]{"Проект", "Статус", "Дедлайн"}, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        try {
            dir = new File(Exam_project.class.getProtectionDomain().getCodeSource().getLocation().toURI()).getParent();
        } catch (URISyntaxException ex) {
            Logger.getLogger(ExcelOperator.class.getName()).log(Level.SEVERE, null, ex);
        }
        initComponents();
        makeVisible(authorizationDialog);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        authorizationDialog = new javax.swing.JDialog();
        authorizationPanel = new javax.swing.JPanel();
        loginLabel = new javax.swing.JLabel();
        loginField = new javax.swing.JTextField();
        passwordLabel = new javax.swing.JLabel();
        passwordField = new javax.swing.JPasswordField();
        loginBtn = new javax.swing.JButton();
        loginInfoLbl = new javax.swing.JLabel();
        newProjectDialog = new javax.swing.JDialog();
        projectInfoPanel = new javax.swing.JPanel();
        projectNameLbl = new javax.swing.JLabel();
        projectNameField = new javax.swing.JTextField();
        projectDescriptionLbl = new javax.swing.JLabel();
        descriptionScroll = new javax.swing.JScrollPane();
        projectDescriptionText = new javax.swing.JTextArea();
        startDateLbl = new javax.swing.JLabel();
        endDateLbl = new javax.swing.JLabel();
        endProjectDate = new javax.swing.JTextField();
        startProjectDate = new javax.swing.JTextField();
        createProjectBtn = new javax.swing.JButton();
        executorsScroll = new javax.swing.JScrollPane();
        executorsTable = new javax.swing.JTable();
        reportsDialog = new javax.swing.JDialog();
        projectsScroll = new javax.swing.JScrollPane();
        projectForReportList = new javax.swing.JList<>();
        reportsBtnPanel = new javax.swing.JPanel();
        showStatsBtn = new javax.swing.JButton();
        showGantBtn = new javax.swing.JButton();
        exportBtn = new javax.swing.JButton();
        tasksDialog = new javax.swing.JDialog();
        filterPanel = new javax.swing.JPanel();
        statusFilterCombo = new javax.swing.JComboBox<>();
        statusFilterLbl = new javax.swing.JLabel();
        priorityFilterLbl = new javax.swing.JLabel();
        priorityFilterCombo = new javax.swing.JComboBox<>();
        createdFilterLbl = new javax.swing.JLabel();
        createdFilterCombo = new javax.swing.JComboBox<>();
        applyFiltersBtn = new javax.swing.JButton();
        tasksScroll = new javax.swing.JScrollPane();
        tasksTable = new javax.swing.JTable();
        newTaskDialog = new javax.swing.JDialog();
        taskInfoPanel = new javax.swing.JPanel();
        taskNameLbl = new javax.swing.JLabel();
        taskNameField = new javax.swing.JTextField();
        taskDescriptionLbl = new javax.swing.JLabel();
        taskdescriptionScroll = new javax.swing.JScrollPane();
        taskDescriptionText = new javax.swing.JTextArea();
        priorityLbl = new javax.swing.JLabel();
        deadlineLbl = new javax.swing.JLabel();
        taskDeadline = new javax.swing.JTextField();
        createNewTaskBtn = new javax.swing.JButton();
        executorCombo = new javax.swing.JComboBox<>();
        executorLbl = new javax.swing.JLabel();
        priorityCombo = new javax.swing.JComboBox<>();
        projectLbl = new javax.swing.JLabel();
        projectCombo = new javax.swing.JComboBox<>();
        ganttDiagramDialog = new javax.swing.JDialog();
        diagramPanel = new javax.swing.JPanel();
        executorsStatistics = new javax.swing.JDialog();
        statisticsScroll = new javax.swing.JScrollPane();
        statisticsTable = new javax.swing.JTable();
        newUserDialog = new javax.swing.JDialog();
        newUserPanel = new javax.swing.JPanel();
        fullNameLbl = new javax.swing.JLabel();
        usernameLbl = new javax.swing.JLabel();
        roleLbl = new javax.swing.JLabel();
        roleComboBox = new javax.swing.JComboBox<>();
        fullNameField = new javax.swing.JTextField();
        usernameField = new javax.swing.JTextField();
        createUserBtn = new javax.swing.JButton();
        taskDetailsDialog = new javax.swing.JDialog();
        taskDetailSplit = new javax.swing.JSplitPane();
        taskHistoryPanel = new javax.swing.JPanel();
        taskStoryLabel = new javax.swing.JLabel();
        taskStoryScroll = new javax.swing.JScrollPane();
        taskHistoryTable = new javax.swing.JTable();
        startTaskBtn = new javax.swing.JButton();
        rateTaskExecutorBtn = new javax.swing.JButton();
        endTaskBtn = new javax.swing.JButton();
        taskDescScroll = new javax.swing.JScrollPane();
        taskDescriptionInfo = new javax.swing.JTextArea();
        taskInfoLbl = new javax.swing.JLabel();
        taskCommentPanel = new javax.swing.JPanel();
        taskCommLabel = new javax.swing.JLabel();
        commentsScroll = new javax.swing.JScrollPane();
        commentsArea = new javax.swing.JTextArea();
        newCommentScroll = new javax.swing.JScrollPane();
        newCommentArea = new javax.swing.JTextArea();
        sendCommentBtn = new javax.swing.JButton();
        setRateDialog = new javax.swing.JDialog();
        setRatePanel = new javax.swing.JPanel();
        saveRateBtn = new javax.swing.JButton();
        rateComboBox = new javax.swing.JComboBox<>();
        rateLabel = new javax.swing.JLabel();
        lblPanel = new javax.swing.JPanel();
        tableNameLbl = new javax.swing.JLabel();
        tableScroll = new javax.swing.JScrollPane();
        activeProjectsTable = new javax.swing.JTable();
        endProjectPanel = new javax.swing.JPanel();
        endProjectBtn = new javax.swing.JButton();
        mainMenuBar = new javax.swing.JMenuBar();
        menuOptions = new javax.swing.JMenu();
        myTasksItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        extendedAccessOptions = new javax.swing.JMenu();
        newProjectItem = new javax.swing.JMenuItem();
        createNewTaskItem = new javax.swing.JMenuItem();
        reportsItem = new javax.swing.JMenuItem();
        newUserItem = new javax.swing.JMenuItem();
        exportUsers = new javax.swing.JMenuItem();

        authorizationDialog.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        authorizationDialog.setTitle("Вход в систему");
        authorizationDialog.setModal(true);
        authorizationDialog.setResizable(false);
        authorizationDialog.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                authorizationDialogWindowClosing(evt);
            }
        });

        loginLabel.setText("Логин*:");

        passwordLabel.setText("Пароль*:");

        loginBtn.setText("Войти");
        loginBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginBtnActionPerformed(evt);
            }
        });

        loginInfoLbl.setText("*Логин и пароль можно получить у администратора.");

        javax.swing.GroupLayout authorizationPanelLayout = new javax.swing.GroupLayout(authorizationPanel);
        authorizationPanel.setLayout(authorizationPanelLayout);
        authorizationPanelLayout.setHorizontalGroup(
            authorizationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(authorizationPanelLayout.createSequentialGroup()
                .addGroup(authorizationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(authorizationPanelLayout.createSequentialGroup()
                        .addGap(59, 59, 59)
                        .addGroup(authorizationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(authorizationPanelLayout.createSequentialGroup()
                                .addComponent(loginLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(loginField))
                            .addGroup(authorizationPanelLayout.createSequentialGroup()
                                .addComponent(passwordLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(authorizationPanelLayout.createSequentialGroup()
                        .addGap(122, 122, 122)
                        .addComponent(loginBtn))
                    .addGroup(authorizationPanelLayout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(loginInfoLbl)))
                .addContainerGap(17, Short.MAX_VALUE))
        );
        authorizationPanelLayout.setVerticalGroup(
            authorizationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(authorizationPanelLayout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(authorizationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(loginLabel)
                    .addComponent(loginField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(authorizationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(passwordLabel)
                    .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(loginInfoLbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 23, Short.MAX_VALUE)
                .addComponent(loginBtn)
                .addGap(26, 26, 26))
        );

        javax.swing.GroupLayout authorizationDialogLayout = new javax.swing.GroupLayout(authorizationDialog.getContentPane());
        authorizationDialog.getContentPane().setLayout(authorizationDialogLayout);
        authorizationDialogLayout.setHorizontalGroup(
            authorizationDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(authorizationDialogLayout.createSequentialGroup()
                .addComponent(authorizationPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        authorizationDialogLayout.setVerticalGroup(
            authorizationDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(authorizationPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        newProjectDialog.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        newProjectDialog.setTitle("Создание нового проекта");
        newProjectDialog.setModal(true);
        newProjectDialog.setResizable(false);

        projectNameLbl.setText("Название: ");

        projectDescriptionLbl.setText("Описание: ");

        projectDescriptionText.setColumns(20);
        projectDescriptionText.setRows(5);
        descriptionScroll.setViewportView(projectDescriptionText);

        startDateLbl.setText("Дата начала: ");

        endDateLbl.setText("Дата окончания: ");

        createProjectBtn.setText("Создать проект");
        createProjectBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createProjectBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout projectInfoPanelLayout = new javax.swing.GroupLayout(projectInfoPanel);
        projectInfoPanel.setLayout(projectInfoPanelLayout);
        projectInfoPanelLayout.setHorizontalGroup(
            projectInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(projectInfoPanelLayout.createSequentialGroup()
                .addGroup(projectInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(projectInfoPanelLayout.createSequentialGroup()
                        .addGap(140, 140, 140)
                        .addComponent(createProjectBtn))
                    .addGroup(projectInfoPanelLayout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addGroup(projectInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(projectDescriptionLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(projectNameLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(startDateLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(endDateLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(projectInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(startProjectDate)
                            .addComponent(endProjectDate)
                            .addComponent(descriptionScroll)
                            .addComponent(projectNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(0, 31, Short.MAX_VALUE))
        );
        projectInfoPanelLayout.setVerticalGroup(
            projectInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(projectInfoPanelLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(projectInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(projectNameLbl)
                    .addComponent(projectNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(36, 36, 36)
                .addGroup(projectInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(descriptionScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(projectDescriptionLbl))
                .addGap(39, 39, 39)
                .addGroup(projectInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(startProjectDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(startDateLbl))
                .addGap(34, 34, 34)
                .addGroup(projectInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(endDateLbl)
                    .addComponent(endProjectDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 42, Short.MAX_VALUE)
                .addComponent(createProjectBtn)
                .addContainerGap())
        );

        executorsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Выбрать", "Пользователь"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        executorsScroll.setViewportView(executorsTable);
        if (executorsTable.getColumnModel().getColumnCount() > 0) {
            executorsTable.getColumnModel().getColumn(0).setResizable(false);
            executorsTable.getColumnModel().getColumn(0).setPreferredWidth(5);
            executorsTable.getColumnModel().getColumn(1).setMinWidth(40);
            executorsTable.getColumnModel().getColumn(1).setPreferredWidth(40);
        }

        javax.swing.GroupLayout newProjectDialogLayout = new javax.swing.GroupLayout(newProjectDialog.getContentPane());
        newProjectDialog.getContentPane().setLayout(newProjectDialogLayout);
        newProjectDialogLayout.setHorizontalGroup(
            newProjectDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(newProjectDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(projectInfoPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(executorsScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 348, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(19, Short.MAX_VALUE))
        );
        newProjectDialogLayout.setVerticalGroup(
            newProjectDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(newProjectDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(newProjectDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(executorsScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 346, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(projectInfoPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 20, Short.MAX_VALUE))
        );

        reportsDialog.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        reportsDialog.setTitle("Отчёты");

        projectsScroll.setViewportView(projectForReportList);

        showStatsBtn.setText("Стастистика по участникам");
        showStatsBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showStatsBtnActionPerformed(evt);
            }
        });

        showGantBtn.setText("График выполнения проекта");
        showGantBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showGantBtnActionPerformed(evt);
            }
        });

        exportBtn.setText("Экспортировать отчёт");
        exportBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout reportsBtnPanelLayout = new javax.swing.GroupLayout(reportsBtnPanel);
        reportsBtnPanel.setLayout(reportsBtnPanelLayout);
        reportsBtnPanelLayout.setHorizontalGroup(
            reportsBtnPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(reportsBtnPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(reportsBtnPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(showStatsBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(showGantBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 226, Short.MAX_VALUE)
                    .addComponent(exportBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        reportsBtnPanelLayout.setVerticalGroup(
            reportsBtnPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, reportsBtnPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(showGantBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(39, 39, 39)
                .addComponent(showStatsBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 39, Short.MAX_VALUE)
                .addComponent(exportBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(19, 19, 19))
        );

        javax.swing.GroupLayout reportsDialogLayout = new javax.swing.GroupLayout(reportsDialog.getContentPane());
        reportsDialog.getContentPane().setLayout(reportsDialogLayout);
        reportsDialogLayout.setHorizontalGroup(
            reportsDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(reportsDialogLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(projectsScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(reportsBtnPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(15, Short.MAX_VALUE))
        );
        reportsDialogLayout.setVerticalGroup(
            reportsDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(reportsDialogLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(reportsDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(projectsScroll)
                    .addComponent(reportsBtnPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(29, Short.MAX_VALUE))
        );

        tasksDialog.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        tasksDialog.setTitle("Задачи");
        tasksDialog.setResizable(false);

        statusFilterCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Все", "Новые", "В работе", "Завершенные", "Просроченные" }));

        statusFilterLbl.setText("Фильтровать по статусам:");

        priorityFilterLbl.setText("Фильтровать по приоритету:");

        priorityFilterCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Все", "Высокий", "Средний", "Низкий" }));

        createdFilterLbl.setText("Сортировать по дате создания:");

        createdFilterCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Сначала старые", "Сначала новые" }));

        applyFiltersBtn.setText("Применить фильтры");
        applyFiltersBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                applyFiltersBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout filterPanelLayout = new javax.swing.GroupLayout(filterPanel);
        filterPanel.setLayout(filterPanelLayout);
        filterPanelLayout.setHorizontalGroup(
            filterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(filterPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(filterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(filterPanelLayout.createSequentialGroup()
                        .addGroup(filterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(filterPanelLayout.createSequentialGroup()
                                .addGroup(filterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(priorityFilterLbl, javax.swing.GroupLayout.DEFAULT_SIZE, 173, Short.MAX_VALUE)
                                    .addComponent(statusFilterLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(filterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(priorityFilterCombo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(statusFilterCombo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(filterPanelLayout.createSequentialGroup()
                                .addComponent(createdFilterLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(createdFilterCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(filterPanelLayout.createSequentialGroup()
                        .addComponent(applyFiltersBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        filterPanelLayout.setVerticalGroup(
            filterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(filterPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(filterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(statusFilterCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(statusFilterLbl))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(filterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(priorityFilterLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(priorityFilterCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(filterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(createdFilterLbl)
                    .addComponent(createdFilterCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(applyFiltersBtn)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tasksTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Задача", "Проект", "Дедлайн"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tasksTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tasksTableMouseClicked(evt);
            }
        });
        tasksScroll.setViewportView(tasksTable);

        javax.swing.GroupLayout tasksDialogLayout = new javax.swing.GroupLayout(tasksDialog.getContentPane());
        tasksDialog.getContentPane().setLayout(tasksDialogLayout);
        tasksDialogLayout.setHorizontalGroup(
            tasksDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tasksDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tasksDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(filterPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(tasksScroll))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        tasksDialogLayout.setVerticalGroup(
            tasksDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tasksDialogLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(filterPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tasksScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 427, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        newTaskDialog.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        newTaskDialog.setTitle("Создание новой задачи");
        newTaskDialog.setModal(true);
        newTaskDialog.setResizable(false);

        taskNameLbl.setText("Название: ");

        taskDescriptionLbl.setText("Описание: ");

        taskDescriptionText.setColumns(20);
        taskDescriptionText.setRows(5);
        taskdescriptionScroll.setViewportView(taskDescriptionText);

        priorityLbl.setText("Приоритет: ");

        deadlineLbl.setText("Дедлайн:");

        createNewTaskBtn.setText("Cоздать задачу");
        createNewTaskBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createNewTaskBtnActionPerformed(evt);
            }
        });

        executorLbl.setText("Исполнитель:");

        priorityCombo.setModel(new DefaultComboBoxModel<>(PriorityLevel.values())
        );

        projectLbl.setText("Проект:");

        projectCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                projectComboActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout taskInfoPanelLayout = new javax.swing.GroupLayout(taskInfoPanel);
        taskInfoPanel.setLayout(taskInfoPanelLayout);
        taskInfoPanelLayout.setHorizontalGroup(
            taskInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(taskInfoPanelLayout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(taskInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(projectLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(deadlineLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(priorityLbl, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(taskDescriptionLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(taskNameLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(executorLbl, javax.swing.GroupLayout.DEFAULT_SIZE, 85, Short.MAX_VALUE))
                .addGap(24, 24, 24)
                .addGroup(taskInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(taskdescriptionScroll)
                    .addComponent(taskNameField)
                    .addComponent(taskDeadline)
                    .addComponent(priorityCombo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(executorCombo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(taskInfoPanelLayout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addComponent(createNewTaskBtn))
                    .addComponent(projectCombo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(42, Short.MAX_VALUE))
        );
        taskInfoPanelLayout.setVerticalGroup(
            taskInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(taskInfoPanelLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(taskInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(projectLbl)
                    .addComponent(projectCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(taskInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(taskNameLbl)
                    .addComponent(taskNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(taskInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(taskdescriptionScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(taskDescriptionLbl))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
                .addGroup(taskInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(taskInfoPanelLayout.createSequentialGroup()
                        .addGroup(taskInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(executorLbl)
                            .addComponent(executorCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(32, 32, 32)
                        .addGroup(taskInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(priorityLbl)
                            .addComponent(priorityCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(37, 37, 37)
                        .addComponent(deadlineLbl))
                    .addComponent(taskDeadline, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33)
                .addComponent(createNewTaskBtn)
                .addContainerGap())
        );

        javax.swing.GroupLayout newTaskDialogLayout = new javax.swing.GroupLayout(newTaskDialog.getContentPane());
        newTaskDialog.getContentPane().setLayout(newTaskDialogLayout);
        newTaskDialogLayout.setHorizontalGroup(
            newTaskDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(newTaskDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(taskInfoPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        newTaskDialogLayout.setVerticalGroup(
            newTaskDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(newTaskDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(taskInfoPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        ganttDiagramDialog.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        ganttDiagramDialog.setResizable(false);

        javax.swing.GroupLayout diagramPanelLayout = new javax.swing.GroupLayout(diagramPanel);
        diagramPanel.setLayout(diagramPanelLayout);
        diagramPanelLayout.setHorizontalGroup(
            diagramPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 597, Short.MAX_VALUE)
        );
        diagramPanelLayout.setVerticalGroup(
            diagramPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 404, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout ganttDiagramDialogLayout = new javax.swing.GroupLayout(ganttDiagramDialog.getContentPane());
        ganttDiagramDialog.getContentPane().setLayout(ganttDiagramDialogLayout);
        ganttDiagramDialogLayout.setHorizontalGroup(
            ganttDiagramDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 597, Short.MAX_VALUE)
            .addGroup(ganttDiagramDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(diagramPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        ganttDiagramDialogLayout.setVerticalGroup(
            ganttDiagramDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 404, Short.MAX_VALUE)
            .addGroup(ganttDiagramDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(diagramPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        executorsStatistics.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        executorsStatistics.setTitle("Стастистика по участникам");

        statisticsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Участник", "Кол-во просроченных задач", "Кол-во завершенных задач", "Баллы"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        statisticsScroll.setViewportView(statisticsTable);

        javax.swing.GroupLayout executorsStatisticsLayout = new javax.swing.GroupLayout(executorsStatistics.getContentPane());
        executorsStatistics.getContentPane().setLayout(executorsStatisticsLayout);
        executorsStatisticsLayout.setHorizontalGroup(
            executorsStatisticsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(executorsStatisticsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(statisticsScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 701, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        executorsStatisticsLayout.setVerticalGroup(
            executorsStatisticsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(executorsStatisticsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(statisticsScroll, javax.swing.GroupLayout.DEFAULT_SIZE, 288, Short.MAX_VALUE)
                .addContainerGap())
        );

        newUserDialog.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        newUserDialog.setTitle("Регистрация нового пользователя");

        fullNameLbl.setText("Полное имя:");

        usernameLbl.setText("Имя пользователя:");

        roleLbl.setText("Роль:");

        roleComboBox.setModel(new DefaultComboBoxModel<>(Role.values()));

        createUserBtn.setText("Добавить");
        createUserBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createUserBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout newUserPanelLayout = new javax.swing.GroupLayout(newUserPanel);
        newUserPanel.setLayout(newUserPanelLayout);
        newUserPanelLayout.setHorizontalGroup(
            newUserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(newUserPanelLayout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(newUserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(newUserPanelLayout.createSequentialGroup()
                        .addComponent(usernameLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(usernameField))
                    .addGroup(newUserPanelLayout.createSequentialGroup()
                        .addGroup(newUserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(fullNameLbl)
                            .addComponent(roleLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(55, 55, 55)
                        .addGroup(newUserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(roleComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(fullNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(newUserPanelLayout.createSequentialGroup()
                                .addGap(11, 11, 11)
                                .addComponent(createUserBtn)))))
                .addGap(0, 35, Short.MAX_VALUE))
        );
        newUserPanelLayout.setVerticalGroup(
            newUserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(newUserPanelLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(newUserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fullNameLbl)
                    .addComponent(fullNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22)
                .addGroup(newUserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(usernameLbl)
                    .addComponent(usernameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(newUserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(roleLbl)
                    .addComponent(roleComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 36, Short.MAX_VALUE)
                .addComponent(createUserBtn)
                .addGap(17, 17, 17))
        );

        javax.swing.GroupLayout newUserDialogLayout = new javax.swing.GroupLayout(newUserDialog.getContentPane());
        newUserDialog.getContentPane().setLayout(newUserDialogLayout);
        newUserDialogLayout.setHorizontalGroup(
            newUserDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(newUserPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        newUserDialogLayout.setVerticalGroup(
            newUserDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(newUserPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        taskDetailsDialog.setModal(true);

        taskStoryLabel.setText("История изменений ");

        taskHistoryTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Статус", "Дата", "Автор"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        taskStoryScroll.setViewportView(taskHistoryTable);

        startTaskBtn.setText("Приступить к выполнению");
        startTaskBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startTaskBtnActionPerformed(evt);
            }
        });

        rateTaskExecutorBtn.setText("Выставить баллы за выполнение");
        rateTaskExecutorBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rateTaskExecutorBtnActionPerformed(evt);
            }
        });

        endTaskBtn.setText("Завершить задачу");
        endTaskBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                endTaskBtnActionPerformed(evt);
            }
        });

        taskDescriptionInfo.setEditable(false);
        taskDescriptionInfo.setColumns(20);
        taskDescriptionInfo.setRows(5);
        taskDescScroll.setViewportView(taskDescriptionInfo);

        taskInfoLbl.setText("Описание задачи ");

        javax.swing.GroupLayout taskHistoryPanelLayout = new javax.swing.GroupLayout(taskHistoryPanel);
        taskHistoryPanel.setLayout(taskHistoryPanelLayout);
        taskHistoryPanelLayout.setHorizontalGroup(
            taskHistoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, taskHistoryPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(rateTaskExecutorBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(97, 97, 97))
            .addGroup(taskHistoryPanelLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(taskHistoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(taskStoryScroll, javax.swing.GroupLayout.DEFAULT_SIZE, 439, Short.MAX_VALUE)
                    .addGroup(taskHistoryPanelLayout.createSequentialGroup()
                        .addComponent(startTaskBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(endTaskBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(taskDescScroll))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, taskHistoryPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(taskHistoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, taskHistoryPanelLayout.createSequentialGroup()
                        .addComponent(taskStoryLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(161, 161, 161))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, taskHistoryPanelLayout.createSequentialGroup()
                        .addComponent(taskInfoLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(160, 160, 160))))
        );
        taskHistoryPanelLayout.setVerticalGroup(
            taskHistoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(taskHistoryPanelLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(taskInfoLbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(taskDescScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(taskStoryLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(taskStoryScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addGroup(taskHistoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(endTaskBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 32, Short.MAX_VALUE)
                    .addComponent(startTaskBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(rateTaskExecutorBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(14, Short.MAX_VALUE))
        );

        taskDetailSplit.setLeftComponent(taskHistoryPanel);

        taskCommLabel.setText("Комментарии");

        commentsArea.setEditable(false);
        commentsArea.setColumns(20);
        commentsArea.setRows(5);
        commentsScroll.setViewportView(commentsArea);

        newCommentArea.setColumns(20);
        newCommentArea.setRows(5);
        newCommentScroll.setViewportView(newCommentArea);

        sendCommentBtn.setText("Отправить");
        sendCommentBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendCommentBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout taskCommentPanelLayout = new javax.swing.GroupLayout(taskCommentPanel);
        taskCommentPanel.setLayout(taskCommentPanelLayout);
        taskCommentPanelLayout.setHorizontalGroup(
            taskCommentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(taskCommentPanelLayout.createSequentialGroup()
                .addGroup(taskCommentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(taskCommentPanelLayout.createSequentialGroup()
                        .addGap(182, 182, 182)
                        .addComponent(taskCommLabel))
                    .addGroup(taskCommentPanelLayout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addGroup(taskCommentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(commentsScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 422, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(taskCommentPanelLayout.createSequentialGroup()
                                .addComponent(newCommentScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(sendCommentBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(26, Short.MAX_VALUE))
        );
        taskCommentPanelLayout.setVerticalGroup(
            taskCommentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(taskCommentPanelLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(taskCommLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(commentsScroll, javax.swing.GroupLayout.DEFAULT_SIZE, 383, Short.MAX_VALUE)
                .addGroup(taskCommentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(taskCommentPanelLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(newCommentScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(taskCommentPanelLayout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(sendCommentBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(17, 17, 17))
        );

        taskDetailSplit.setRightComponent(taskCommentPanel);

        javax.swing.GroupLayout taskDetailsDialogLayout = new javax.swing.GroupLayout(taskDetailsDialog.getContentPane());
        taskDetailsDialog.getContentPane().setLayout(taskDetailsDialogLayout);
        taskDetailsDialogLayout.setHorizontalGroup(
            taskDetailsDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, taskDetailsDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(taskDetailSplit))
        );
        taskDetailsDialogLayout.setVerticalGroup(
            taskDetailsDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, taskDetailsDialogLayout.createSequentialGroup()
                .addGap(0, 6, Short.MAX_VALUE)
                .addComponent(taskDetailSplit, javax.swing.GroupLayout.PREFERRED_SIZE, 525, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        setRateDialog.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setRateDialog.setModal(true);

        saveRateBtn.setText("Сохранить");
        saveRateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveRateBtnActionPerformed(evt);
            }
        });

        rateComboBox.setModel(new DefaultComboBoxModel<Integer>
            (new Integer[]{1,2,3,4,5,6,7,8,9,10}));

        rateLabel.setText("Баллы:");

        javax.swing.GroupLayout setRatePanelLayout = new javax.swing.GroupLayout(setRatePanel);
        setRatePanel.setLayout(setRatePanelLayout);
        setRatePanelLayout.setHorizontalGroup(
            setRatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(setRatePanelLayout.createSequentialGroup()
                .addGroup(setRatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(setRatePanelLayout.createSequentialGroup()
                        .addGap(76, 76, 76)
                        .addComponent(saveRateBtn))
                    .addGroup(setRatePanelLayout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(rateLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(rateComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(26, Short.MAX_VALUE))
        );
        setRatePanelLayout.setVerticalGroup(
            setRatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, setRatePanelLayout.createSequentialGroup()
                .addContainerGap(17, Short.MAX_VALUE)
                .addGroup(setRatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rateComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rateLabel))
                .addGap(18, 18, 18)
                .addComponent(saveRateBtn)
                .addContainerGap())
        );

        javax.swing.GroupLayout setRateDialogLayout = new javax.swing.GroupLayout(setRateDialog.getContentPane());
        setRateDialog.getContentPane().setLayout(setRateDialogLayout);
        setRateDialogLayout.setHorizontalGroup(
            setRateDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(setRateDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(setRatePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        setRateDialogLayout.setVerticalGroup(
            setRateDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(setRateDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(setRatePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        setRateDialog.getAccessibleContext().setAccessibleParent(taskDetailsDialog);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tableNameLbl.setText("Проекты");

        javax.swing.GroupLayout lblPanelLayout = new javax.swing.GroupLayout(lblPanel);
        lblPanel.setLayout(lblPanelLayout);
        lblPanelLayout.setHorizontalGroup(
            lblPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(lblPanelLayout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addComponent(tableNameLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        lblPanelLayout.setVerticalGroup(
            lblPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, lblPanelLayout.createSequentialGroup()
                .addGap(0, 6, Short.MAX_VALUE)
                .addComponent(tableNameLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        activeProjectsTable.setModel(projectsTableModel);
        activeProjectsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                activeProjectsTableMouseClicked(evt);
            }
        });
        tableScroll.setViewportView(activeProjectsTable);

        endProjectBtn.setText("Завершить проект");
        endProjectBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                endProjectBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout endProjectPanelLayout = new javax.swing.GroupLayout(endProjectPanel);
        endProjectPanel.setLayout(endProjectPanelLayout);
        endProjectPanelLayout.setHorizontalGroup(
            endProjectPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, endProjectPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(endProjectBtn)
                .addGap(171, 171, 171))
        );
        endProjectPanelLayout.setVerticalGroup(
            endProjectPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(endProjectPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(endProjectBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                .addContainerGap())
        );

        menuOptions.setText("Общее меню");

        myTasksItem.setText("Мои задачи");
        myTasksItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                myTasksItemActionPerformed(evt);
            }
        });
        menuOptions.add(myTasksItem);

        exitMenuItem.setText("Выйти");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        menuOptions.add(exitMenuItem);

        mainMenuBar.add(menuOptions);

        extendedAccessOptions.setText("Расширенный доступ");

        newProjectItem.setText("Новый проект");
        newProjectItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newProjectItemActionPerformed(evt);
            }
        });
        extendedAccessOptions.add(newProjectItem);

        createNewTaskItem.setText("Новая задача");
        createNewTaskItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createNewTaskItemActionPerformed(evt);
            }
        });
        extendedAccessOptions.add(createNewTaskItem);

        reportsItem.setText("Отчеты");
        reportsItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reportsItemActionPerformed(evt);
            }
        });
        extendedAccessOptions.add(reportsItem);

        newUserItem.setText("Добавить нового пользователя");
        newUserItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newUserItemActionPerformed(evt);
            }
        });
        extendedAccessOptions.add(newUserItem);

        exportUsers.setText("Выгрузить пользователей");
        exportUsers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportUsersActionPerformed(evt);
            }
        });
        extendedAccessOptions.add(exportUsers);

        mainMenuBar.add(extendedAccessOptions);

        setJMenuBar(mainMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(121, 121, 121)
                .addComponent(lblPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tableScroll, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 481, Short.MAX_VALUE)
                    .addComponent(endProjectPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(lblPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(tableScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(endProjectPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void loginBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginBtnActionPerformed
        if (!loginField.getText().trim().isEmpty() && passwordField.getPassword().length != 0) {
            currentUser = controller.authorization(loginField.getText(), String.valueOf(passwordField.getPassword()));
            List<JTextField> fields = new ArrayList<>(Arrays.asList(loginField, passwordField));
            if (currentUser != null) {
                authorizationDialog.dispose();
                clearFields(fields);
                setUpUserAccess(currentUser.getRole());
                updateProjectsTable();
                makeVisible(this);
            } else {
                JOptionPane.showMessageDialog(null, "Пользователь не найден или неправильно введен логин/пароль!", null, JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Необходимо заполнить оба поля!", null, JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_loginBtnActionPerformed

    private void newProjectItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newProjectItemActionPerformed
        updateExecutorsAvaliableTable();
        makeVisible(newProjectDialog);
    }//GEN-LAST:event_newProjectItemActionPerformed

    private void myTasksItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_myTasksItemActionPerformed
        taskListToShow = controller.getTasksForCurrentUser();
        currentTasksTable = "userTasks";
        updateTasksTable(taskListToShow);
        makeVisible(tasksDialog);
    }//GEN-LAST:event_myTasksItemActionPerformed

    private void newUserItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newUserItemActionPerformed
        makeVisible(newUserDialog);
    }//GEN-LAST:event_newUserItemActionPerformed

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        this.dispose();
        makeVisible(authorizationDialog);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void createNewTaskBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createNewTaskBtnActionPerformed
        Project project = (Project) projectCombo.getSelectedItem();
        if (!taskNameField.getText().trim().isEmpty()
                && !taskDeadline.getText().trim().isEmpty()
                && !taskDescriptionText.getText().trim().isEmpty()
                && project.getStatus() != Status.DONE) {
            LocalDate newTaskDeadline = null;
            LocalDate today = LocalDate.now();
            LocalDate projectEndDate = project.getEndDate();
            try {
                newTaskDeadline = LocalDate.parse(taskDeadline.getText().trim(), formatter);
                if (newTaskDeadline.isBefore(today)) {
                    JOptionPane.showMessageDialog(null, "Дата окончания не может быть раньше текущей даты!", null, JOptionPane.WARNING_MESSAGE);
                } else if (newTaskDeadline.isAfter(projectEndDate)) {
                    JOptionPane.showMessageDialog(null, "Дата окончания не может позже даты окончания проекта! \nДата окончания проекта: " + projectEndDate, null, JOptionPane.WARNING_MESSAGE);
                } else {
                    PriorityLevel priority = (PriorityLevel) priorityCombo.getSelectedItem();
                    User executor = (User) executorCombo.getSelectedItem();
                    Project selected = (Project) projectCombo.getSelectedItem();
                    String newTaskName = taskNameField.getText().trim();
                    String taskDescription = taskDescriptionText.getText().trim();
                    boolean result = controller.createNewTask(newTaskName, taskDescription, selected, executor, priority, newTaskDeadline);
                    if (!result) {
                        JOptionPane.showMessageDialog(null, "Проверьте задачу на совпадение названия и дедлайна с уже существующими!", null, JOptionPane.WARNING_MESSAGE);
                    } else {
                        JOptionPane.showMessageDialog(null, "Задача  успешно создана!", null, JOptionPane.INFORMATION_MESSAGE);
                        updateProjectsTable();
                        newTaskDialog.dispose();
                        List<JTextField> fields = new ArrayList<>(Arrays.asList(taskNameField, taskDeadline));
                        clearFields(fields);
                        taskDescriptionText.setText("");
                    }
                }
            } catch (DateTimeParseException ex) {
                JOptionPane.showMessageDialog(null, "Дата не соотвествует формату ГГГГ-ММ-ДД", null, JOptionPane.WARNING_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Необходимо заполнить все поля!", null, JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_createNewTaskBtnActionPerformed

    private void projectComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_projectComboActionPerformed
        Project selected = (Project) projectCombo.getSelectedItem();
        executorCombo.removeAllItems();
        if (selected != null) {
            List<User> executors = selected.getExecutors();
            for (User user : executors) {
                executorCombo.addItem(user);
            }
        }
    }//GEN-LAST:event_projectComboActionPerformed

    private void createProjectBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createProjectBtnActionPerformed
        DefaultTableModel tableModel = (DefaultTableModel) executorsTable.getModel();
        List<User> executors = new ArrayList<>();
        for (int i = 0; i < tableModel.getRowCount(); i++) {
            Boolean checked = (Boolean) tableModel.getValueAt(i, 0);
            if (Boolean.TRUE.equals(checked)) {
                User executor = (User) tableModel.getValueAt(i, 1);
                executors.add(executor);
            }
        }
        if (!executors.isEmpty() && !projectNameField.getText().trim().isEmpty()
                && !projectDescriptionText.getText().trim().isEmpty()
                && !endProjectDate.getText().trim().isEmpty() && !startProjectDate.getText().trim().isEmpty()) {
            LocalDate startDate = null;
            LocalDate endDate = null;
            LocalDate today = LocalDate.now();
            try {
                startDate = LocalDate.parse(startProjectDate.getText(), formatter);
                endDate = LocalDate.parse(endProjectDate.getText(), formatter);
                if (endDate.isBefore(today) || startDate.isBefore(today)) {
                    JOptionPane.showMessageDialog(null, "Нельзя указать дату более раннюю, чем текущая!", null, JOptionPane.WARNING_MESSAGE);
                } else if (endDate.isBefore(startDate)) {
                    JOptionPane.showMessageDialog(null, "Дата окончания не может быть раньше даты начала!", null, JOptionPane.WARNING_MESSAGE);
                } else {
                    String newProjectName = projectNameField.getText().trim();
                    String projectDescripion = projectDescriptionText.getText().trim();
                    int transactionResult = controller.createNewProject(newProjectName, projectDescripion, startDate, endDate, executors);
                    if (transactionResult == -1) {
                        JOptionPane.showMessageDialog(null, "Проект с таким имененем уже существует!", null, JOptionPane.WARNING_MESSAGE);
                        projectNameField.setText("");
                    } else {
                        JOptionPane.showMessageDialog(null, "Проект успешно создан!", null, JOptionPane.INFORMATION_MESSAGE);
                        updateProjectsTable();
                        newProjectDialog.dispose();
                        List<JTextField> fields = new ArrayList<>(Arrays.asList(projectNameField, endProjectDate, startProjectDate));
                        clearFields(fields);
                        projectDescriptionText.setText("");
                    }
                }
            } catch (DateTimeParseException ex) {
                JOptionPane.showMessageDialog(null, "Дата не соотвествует формату ГГГГ-ММ-ДД", null, JOptionPane.WARNING_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Проверьте заполненность всех полей!", null, JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_createProjectBtnActionPerformed

    private void createUserBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createUserBtnActionPerformed
        if (!usernameField.getText().trim().isEmpty() && !fullNameField.getText().trim().isEmpty()) {
            String fullName = fullNameField.getText().trim();
            String username = usernameField.getText().trim();
            Role role = (Role) roleComboBox.getSelectedItem();
            boolean transactionResult = controller.createNewUser(fullName, username, role);
            if (transactionResult) {
                JOptionPane.showMessageDialog(null, "Пользователь успешно добавлен!", null, JOptionPane.INFORMATION_MESSAGE);
                fullNameField.setText("");
                usernameField.setText("");
                newUserDialog.dispose();
            } else {
                JOptionPane.showMessageDialog(null, "Пользователь с таким имененем уже существует!", null, JOptionPane.WARNING_MESSAGE);
                fullNameField.setText("");
                usernameField.setText("");
            }
        }
    }//GEN-LAST:event_createUserBtnActionPerformed

    private void tasksTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tasksTableMouseClicked
        if (evt.getClickCount() == 2 && evt.getButton() == MouseEvent.BUTTON1) {
            int row = tasksTable.getSelectedRow();
            ProjectTask taskFromTable = (ProjectTask) tasksTable.getValueAt(row, 0);
            currentTaskToShow = controller.getTaskByID(taskFromTable.getTaskID());
            updateTaskDetails();
            makeVisible(taskDetailsDialog);
        }
    }//GEN-LAST:event_tasksTableMouseClicked

    private void activeProjectsTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_activeProjectsTableMouseClicked
        if (evt.getClickCount() == 2 && evt.getButton() == MouseEvent.BUTTON1 && currentUser.getRole() != Role.EXECUTOR) {
            currentTasksTable = "projectTasks";
            int row = activeProjectsTable.getSelectedRow();
            Project project = (Project) activeProjectsTable.getValueAt(row, 0);
            taskListToShow = controller.getTasksForProject(project);
            updateTasksTable(taskListToShow);
            makeVisible(tasksDialog);
        }
    }//GEN-LAST:event_activeProjectsTableMouseClicked

    private void authorizationDialogWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_authorizationDialogWindowClosing
        System.exit(0);
    }//GEN-LAST:event_authorizationDialogWindowClosing

    private void startTaskBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startTaskBtnActionPerformed
        boolean result = controller.changeStatus(currentTaskToShow.getTaskID(), Status.IN_PROGRESS);
        if (result) {
            currentTaskToShow = controller.getTaskByID(currentTaskToShow.getTaskID());
            taskListToShow = controller.getTasksForCurrentUser();
            updateTaskDetails();
            updateTasksTable(taskListToShow);
            JOptionPane.showMessageDialog(null, "Вы приступили к выполнению задачи!", null, JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_startTaskBtnActionPerformed

    private void endTaskBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_endTaskBtnActionPerformed
        int answer = JOptionPane.showConfirmDialog(null, "Вы уверены, что хотите завершить выполнение задачи? Действие невозможно отменить.", null, JOptionPane.YES_NO_OPTION);
        if (answer == JOptionPane.YES_OPTION) {
            boolean result = controller.changeStatus(currentTaskToShow.getTaskID(), Status.DONE);
            if (result) {
                currentTaskToShow = controller.getTaskByID(currentTaskToShow.getTaskID());
                updateTaskDetails();
                taskListToShow = controller.getTasksForCurrentUser();
                updateTasksTable(taskListToShow);
            }
        }
    }//GEN-LAST:event_endTaskBtnActionPerformed

    private void sendCommentBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendCommentBtnActionPerformed
        if (!newCommentArea.getText().trim().isEmpty()) {
            boolean result = controller.createComment(currentTaskToShow.getTaskID(), newCommentArea.getText().trim(), LocalDateTime.now().withNano(0));
            if (result) {
                currentTaskToShow = controller.getTaskByID(currentTaskToShow.getTaskID());
                updateTasksTable(taskListToShow);
                updateTaskDetails();
                newCommentArea.setText("");
            }
        }
    }//GEN-LAST:event_sendCommentBtnActionPerformed

    private void rateTaskExecutorBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rateTaskExecutorBtnActionPerformed
        makeVisible(setRateDialog);
    }//GEN-LAST:event_rateTaskExecutorBtnActionPerformed

    private void saveRateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveRateBtnActionPerformed
        Integer rate = (Integer) rateComboBox.getSelectedItem();
        boolean successResult = controller.addPoints(currentTaskToShow.getExecutor().getUserId(), rate, currentTaskToShow.getTaskID());
        if (successResult) {
            JOptionPane.showMessageDialog(null, "Баллы успешно начислены!", null, JOptionPane.INFORMATION_MESSAGE);
            currentTaskToShow = controller.getTaskByID(currentTaskToShow.getTaskID());
            updateTaskDetails();
            updateProjectsTable();
            setRateDialog.dispose();
        }
    }//GEN-LAST:event_saveRateBtnActionPerformed

    private void reportsItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reportsItemActionPerformed
        List<Project> projects = controller.getProjectsForCurrentUser();
        DefaultListModel<Project> jlistModel = new DefaultListModel<>();
        for (Project p : projects) {
            jlistModel.addElement(p);
        }
        projectForReportList.setModel(jlistModel);
        makeVisible(reportsDialog);
    }//GEN-LAST:event_reportsItemActionPerformed

    private void showGantBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showGantBtnActionPerformed
        Project selectedProject = projectForReportList.getSelectedValue();
        if (selectedProject != null) {
            drawGanttDiagramm(selectedProject);
            makeVisible(ganttDiagramDialog);
        } else {
            JOptionPane.showMessageDialog(null, "Необходимо выбрать проект из списка!", null, JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_showGantBtnActionPerformed

    private void showStatsBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showStatsBtnActionPerformed
        Project selectedProject = projectForReportList.getSelectedValue();
        if (selectedProject != null) {
            updateStatsTable(selectedProject);
            makeVisible(executorsStatistics);
        } else {
            JOptionPane.showMessageDialog(null, "Необходимо выбрать проект из списка!", null, JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_showStatsBtnActionPerformed

    private void endProjectBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_endProjectBtnActionPerformed
        int row = activeProjectsTable.getSelectedRow();
        if (row != -1) {
            Project selectedProject = (Project) activeProjectsTable.getValueAt(row, 0);
            if (selectedProject.getCreator().getUserId() == currentUser.getUserId()) {
                if (allTasksCompleted(selectedProject)) {
                    boolean projectEnded = controller.endProject(selectedProject.getProjectID());
                    if (projectEnded) {
                        JOptionPane.showMessageDialog(null, "Проект успешно завершен!", null, JOptionPane.INFORMATION_MESSAGE);
                        updateProjectsTable();
                    } else {
                        JOptionPane.showMessageDialog(null, "Не удалось завершить проект!", null, JOptionPane.ERROR_MESSAGE);
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Нельзя завершить проект! Не все задачи выполнены!", null, JOptionPane.WARNING_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(null, "Нельзя завершить проект! У вас нет прав!", null, JOptionPane.WARNING_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Необходимо выбрать проект!", null, JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_endProjectBtnActionPerformed

    private void exportBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportBtnActionPerformed
        Project selectedProject = projectForReportList.getSelectedValue();;
        if (selectedProject != null) {
            JFileChooser fileChooser = new JFileChooser(dir);
            FileNameExtensionFilter filter = new FileNameExtensionFilter("Excel file(*.xlsx)", "xlsx");
            fileChooser.setFileFilter(filter);
            String path = null;
            int ret = fileChooser.showSaveDialog(null);
            if (ret == JFileChooser.APPROVE_OPTION) {
                path = fileChooser.getSelectedFile().getAbsolutePath();
            }
            if (path != null) {
                List<User> users = controller.getAllUsers();
                List<ProjectTask> projectTasks = controller.getTasksForProject(selectedProject);
                Map<User, UserStats> stats = StatisticsOperator.getUserStats(users, projectTasks);
                ExcelOperator.exportReport(path, stats);
            }
        }
    }//GEN-LAST:event_exportBtnActionPerformed

    private void createNewTaskItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createNewTaskItemActionPerformed
        List<Project> projects = controller.getProjectsForCurrentUser();
        projectCombo.removeAllItems();
        for (Project project : projects) {
            if (project.getStatus() != Status.DONE) {
                projectCombo.addItem(project);
            }
        }
        makeVisible(newTaskDialog);
    }//GEN-LAST:event_createNewTaskItemActionPerformed

    private void applyFiltersBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_applyFiltersBtnActionPerformed
        String createdOrder = (String) createdFilterCombo.getSelectedItem();
        String status = (String) statusFilterCombo.getSelectedItem();
        String priority = (String) priorityFilterCombo.getSelectedItem();
        List<ProjectTask> filtered = taskListToShow.stream()
                .filter(task -> status.equals("Все")
                || (status.equals("Новые") && task.getStatus() == Status.NEW)
                || (status.equals("В работе") && task.getStatus() == Status.IN_PROGRESS)
                || (status.equals("Завершенные") && task.getStatus() == Status.DONE)
                || (status.equals("Просроченные") && task.getStatus() == Status.OVERDUE))
                .filter(task -> priority.equals("Все")
                || (priority.equals("Высокий") && task.getPriority() == PriorityLevel.HIGH)
                || (priority.equals("Средний") && task.getPriority() == PriorityLevel.MEDIUM)
                || (priority.equals("Низкий") && task.getPriority() == PriorityLevel.LOW))
                .sorted(createdOrder.equals("Сначала старые")
                        ? Comparator.comparing(ProjectTask::getCreatedAt) : Comparator.comparing(ProjectTask::getCreatedAt).reversed())
                .collect(Collectors.toList());

        updateTasksTable(filtered);
    }//GEN-LAST:event_applyFiltersBtnActionPerformed

    private void exportUsersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportUsersActionPerformed
        JFileChooser fileChooser = new JFileChooser(dir);
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Excel file(*.xlsx)", "xlsx");
        fileChooser.setFileFilter(filter);
        String path = null;
        int ret = fileChooser.showSaveDialog(null);
        if (ret == JFileChooser.APPROVE_OPTION) {
            path = fileChooser.getSelectedFile().getAbsolutePath();
        }
        if (path != null) {
            List <User> users = controller.getAllUsers();
            ExcelOperator.exportUsers(users, path);
        }
    }//GEN-LAST:event_exportUsersActionPerformed

    

    private boolean allTasksCompleted(Project project) {
        List<ProjectTask> tasks = project.getTasks();
        boolean allCompleted = true;
        for (ProjectTask task : tasks) {
            if (task.getStatus() != Status.DONE) {
                allCompleted = false;
            }
        }
        return allCompleted;
    }

    private void updateProjectsTable() {
        projectsTableModel.setRowCount(0);
        List<Project> projects = controller.getProjectsForCurrentUser();
        for (Project project : projects) {
            projectsTableModel.addRow(new Object[]{project, project.getStatus(), project.getEndDate()});
        }
        ColorRenderer renderer = new ColorRenderer();
        for (int i = 0;
                i < activeProjectsTable.getColumnCount();
                i++) {
            activeProjectsTable.getColumnModel().getColumn(i).setCellRenderer(renderer);
            renderer.setHorizontalAlignment(SwingConstants.CENTER);
        }
    }

    private void updateTasksTable(List<ProjectTask> tasks) {
        DefaultTableModel model = (DefaultTableModel) tasksTable.getModel();
        model.setRowCount(0);
        Object[][] data = new Object[tasks.size()][3];
        for (int i = 0; i < tasks.size(); i++) {
            ProjectTask task = tasks.get(i);
            data[i][0] = task;
            if (currentTasksTable.equals("projectTasks")) {
                data[i][1] = task.getExecutor();
            } else {
                data[i][1] = task.getProject();
            }
            data[i][2] = task.getDeadline();
        }

        String[] titles;
        if (currentTasksTable.equals("projectTasks")) {
            titles = new String[]{"Задача", "Исполнитель", "Дедлайн"};
        } else {
            titles = new String[]{"Задача", "Проект", "Дедлайн"};
        }

        tasksTable.setModel(new DefaultTableModel(data, titles) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        });

        ColorRenderer renderer = new ColorRenderer();
        for (int i = 0; i < tasksTable.getColumnCount(); i++) {
            tasksTable.getColumnModel().getColumn(i).setCellRenderer(renderer);
            renderer.setHorizontalAlignment(SwingConstants.CENTER);
        }
    }

    private void updateTaskDetails() {
        startTaskBtn.setEnabled(currentTaskToShow.getStatus() == Status.NEW && currentTaskToShow.getExecutor().getUserId() == currentUser.getUserId());
        endTaskBtn.setEnabled((currentTaskToShow.getStatus() != Status.NEW) && (currentTaskToShow.getStatus() != Status.DONE));
        rateTaskExecutorBtn.setEnabled(currentTaskToShow.getExecutor().getUserId() != currentUser.getUserId()
                && currentTaskToShow.getStatus() == Status.DONE
                && !currentTaskToShow.getIsRated());

        taskInfoLbl.setText("Описание задачи " + currentTaskToShow.getName());
        StringBuilder sb = new StringBuilder();
        List<Comment> comments = currentTaskToShow.getComments();
        for (Comment comment : comments) {
            sb.append(comment.getCreator().getFullName())
                    .append(" (").append(comment.getCreatedAt().format(formatterWithTime)).append(")").append("\n");
            sb.append(comment.getMessage()).append("\n\n");
        }
        commentsArea.setText(sb.toString());
        commentsArea.setCaretPosition(0);

        StringBuilder sbDesc = new StringBuilder();
        sbDesc.append(currentTaskToShow.getDescription());
        taskDescriptionInfo.setText(sbDesc.toString());
        taskDescriptionInfo.setCaretPosition(0);

        DefaultTableModel model = (DefaultTableModel) taskHistoryTable.getModel();
        List<TaskHistory> taskHistory = currentTaskToShow.getHistory();
        model.setRowCount(0);
        Object[][] data = new Object[taskHistory.size()][3];
        for (int i = 0; i < taskHistory.size(); i++) {
            TaskHistory history = taskHistory.get(i);
            data[i][0] = history.getStatusSet();
            data[i][1] = history.getChanged_at().format(formatterWithTime);
            data[i][2] = history.getUser();
        }
        String[] titles = {"Статус", "Дата", "Автор"};
        taskHistoryTable.setModel(new DefaultTableModel(data, titles) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        });

        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(SwingConstants.CENTER);
        for (int i = 0; i < taskHistoryTable.getColumnCount(); i++) {
            taskHistoryTable.getColumnModel().getColumn(i).setCellRenderer(centerRenderer);
        }
    }

    private Map<User, UserStats> updateStatsTable(Project project) {
        DefaultTableModel model = (DefaultTableModel) statisticsTable.getModel();
        model.setRowCount(0);
        List<User> users = controller.getAllUsers();
        List<ProjectTask> projectTasks = controller.getTasksForProject(project);
        Map<User, UserStats> stats = StatisticsOperator.getUserStats(users, projectTasks);
        Object[][] data = new Object[users.size()][4];
        int i = 0;
        for (Map.Entry<User, UserStats> entry : stats.entrySet()) {
            User user = entry.getKey();
            UserStats userStats = entry.getValue();
            data[i][0] = user;
            data[i][1] = userStats.getOverdueCount();
            data[i][2] = userStats.getCompletedCount();
            data[i][3] = user.getRate();
            i++;
        }
        String[] titles = {"Пользователь", "Просроченные задачи", "Выполненные задачи", "Общий балл"};
        statisticsTable.setModel(new DefaultTableModel(data, titles) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        });

        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(SwingConstants.CENTER);
        for (int j = 0; j < statisticsTable.getColumnCount(); j++) {
            statisticsTable.getColumnModel().getColumn(j).setCellRenderer(centerRenderer);
        }
        return stats;
    }

    private void updateExecutorsAvaliableTable() {
        DefaultTableModel model = (DefaultTableModel) executorsTable.getModel();
        model.setRowCount(0);
        List<User> users = controller.getAllUsers();
        Object[][] data = new Object[users.size()][3];
        for (int i = 0; i < users.size(); i++) {
            User user = users.get(i);
            data[i][0] = Boolean.FALSE;
            data[i][1] = user;

        }
        String[] titles = {"Выбрать", "Пользователь"};
        executorsTable.setModel(new DefaultTableModel(data, titles) {
            @Override
            public Class<?> getColumnClass(int column) {
                switch (column) {
                    case 0:
                        return Boolean.class;
                    case 1:
                        return String.class;
                }
                return null;
            }

            @Override
            public boolean isCellEditable(int row, int column) {
                return column == 0;
            }
        });

        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(SwingConstants.CENTER);
        executorsTable.getColumnModel().getColumn(1).setCellRenderer(centerRenderer);
        executorsTable.getColumnModel().getColumn(0).setPreferredWidth(5);
    }

    private void setUpUserAccess(Role role) {
        extendedAccessOptions.setEnabled(role != Role.EXECUTOR);
        newUserItem.setEnabled(role == Role.ADMIN);
        exportUsers.setEnabled(role == Role.ADMIN);
        endProjectBtn.setEnabled(role != Role.EXECUTOR);
    }

    private void clearFields(List<JTextField> fields) {
        for (JTextField field : fields) {
            field.setText("");
        }
    }

    private void makeVisible(JDialog dialog) {
        dialog.pack();
        dialog.setLocationRelativeTo(null);
        dialog.setVisible(true);
    }

    private void makeVisible(JFrame frame) {
        frame.setLocationRelativeTo(null);
        frame.setVisible(true);
    }

    private void drawGanttDiagramm(Project project) {
        diagramPanel.removeAll();
        diagramPanel.revalidate();
        diagramPanel.repaint();
        TaskSeries projectToShow = new TaskSeries(project.getProjectName());
        List<ProjectTask> tasks = controller.getTasksForProject(project);
        for (ProjectTask task : tasks) {
            Date start = Date.from(task.getCreatedAt().atZone(ZoneId.systemDefault()).toInstant());
            Date end = Date.from(task.getDeadline().atStartOfDay(ZoneId.systemDefault()).toInstant());
            String taskName = task.getName();
            projectToShow.add(new Task(taskName, new SimpleTimePeriod(start, end)));
        }
        TaskSeriesCollection dataset = new TaskSeriesCollection();
        dataset.add(projectToShow);
        JFreeChart chart = ChartFactory.createGanttChart(
                "График выполнения проекта",
                "Задачи",
                "Сроки выполнения",
                dataset
        );
        ChartPanel ganttPanel = new ChartPanel(chart);
        ganttPanel.setPreferredSize(new Dimension(597, 404));
        diagramPanel.setLayout(new java.awt.BorderLayout());
        diagramPanel.add(ganttPanel, java.awt.BorderLayout.CENTER);
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable activeProjectsTable;
    private javax.swing.JButton applyFiltersBtn;
    private javax.swing.JDialog authorizationDialog;
    private javax.swing.JPanel authorizationPanel;
    private javax.swing.JTextArea commentsArea;
    private javax.swing.JScrollPane commentsScroll;
    private javax.swing.JButton createNewTaskBtn;
    private javax.swing.JMenuItem createNewTaskItem;
    private javax.swing.JButton createProjectBtn;
    private javax.swing.JButton createUserBtn;
    private javax.swing.JComboBox<String> createdFilterCombo;
    private javax.swing.JLabel createdFilterLbl;
    private javax.swing.JLabel deadlineLbl;
    private javax.swing.JScrollPane descriptionScroll;
    private javax.swing.JPanel diagramPanel;
    private javax.swing.JLabel endDateLbl;
    private javax.swing.JButton endProjectBtn;
    private javax.swing.JTextField endProjectDate;
    private javax.swing.JPanel endProjectPanel;
    private javax.swing.JButton endTaskBtn;
    private javax.swing.JComboBox<User> executorCombo;
    private javax.swing.JLabel executorLbl;
    private javax.swing.JScrollPane executorsScroll;
    private javax.swing.JDialog executorsStatistics;
    private javax.swing.JTable executorsTable;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JButton exportBtn;
    private javax.swing.JMenuItem exportUsers;
    private javax.swing.JMenu extendedAccessOptions;
    private javax.swing.JPanel filterPanel;
    private javax.swing.JTextField fullNameField;
    private javax.swing.JLabel fullNameLbl;
    private javax.swing.JDialog ganttDiagramDialog;
    private javax.swing.JPanel lblPanel;
    private javax.swing.JButton loginBtn;
    private javax.swing.JTextField loginField;
    private javax.swing.JLabel loginInfoLbl;
    private javax.swing.JLabel loginLabel;
    private javax.swing.JMenuBar mainMenuBar;
    private javax.swing.JMenu menuOptions;
    private javax.swing.JMenuItem myTasksItem;
    private javax.swing.JTextArea newCommentArea;
    private javax.swing.JScrollPane newCommentScroll;
    private javax.swing.JDialog newProjectDialog;
    private javax.swing.JMenuItem newProjectItem;
    private javax.swing.JDialog newTaskDialog;
    private javax.swing.JDialog newUserDialog;
    private javax.swing.JMenuItem newUserItem;
    private javax.swing.JPanel newUserPanel;
    private javax.swing.JPasswordField passwordField;
    private javax.swing.JLabel passwordLabel;
    private javax.swing.JComboBox<PriorityLevel> priorityCombo;
    private javax.swing.JComboBox<String> priorityFilterCombo;
    private javax.swing.JLabel priorityFilterLbl;
    private javax.swing.JLabel priorityLbl;
    private javax.swing.JComboBox<Project
    > projectCombo;
    private javax.swing.JLabel projectDescriptionLbl;
    private javax.swing.JTextArea projectDescriptionText;
    private javax.swing.JList<Project> projectForReportList;
    private javax.swing.JPanel projectInfoPanel;
    private javax.swing.JLabel projectLbl;
    private javax.swing.JTextField projectNameField;
    private javax.swing.JLabel projectNameLbl;
    private javax.swing.JScrollPane projectsScroll;
    private javax.swing.JComboBox<Integer> rateComboBox;
    private javax.swing.JLabel rateLabel;
    private javax.swing.JButton rateTaskExecutorBtn;
    private javax.swing.JPanel reportsBtnPanel;
    private javax.swing.JDialog reportsDialog;
    private javax.swing.JMenuItem reportsItem;
    private javax.swing.JComboBox<Role> roleComboBox;
    private javax.swing.JLabel roleLbl;
    private javax.swing.JButton saveRateBtn;
    private javax.swing.JButton sendCommentBtn;
    private javax.swing.JDialog setRateDialog;
    private javax.swing.JPanel setRatePanel;
    private javax.swing.JButton showGantBtn;
    private javax.swing.JButton showStatsBtn;
    private javax.swing.JLabel startDateLbl;
    private javax.swing.JTextField startProjectDate;
    private javax.swing.JButton startTaskBtn;
    private javax.swing.JScrollPane statisticsScroll;
    private javax.swing.JTable statisticsTable;
    private javax.swing.JComboBox<String> statusFilterCombo;
    private javax.swing.JLabel statusFilterLbl;
    private javax.swing.JLabel tableNameLbl;
    private javax.swing.JScrollPane tableScroll;
    private javax.swing.JLabel taskCommLabel;
    private javax.swing.JPanel taskCommentPanel;
    private javax.swing.JTextField taskDeadline;
    private javax.swing.JScrollPane taskDescScroll;
    private javax.swing.JTextArea taskDescriptionInfo;
    private javax.swing.JLabel taskDescriptionLbl;
    private javax.swing.JTextArea taskDescriptionText;
    private javax.swing.JSplitPane taskDetailSplit;
    private javax.swing.JDialog taskDetailsDialog;
    private javax.swing.JPanel taskHistoryPanel;
    private javax.swing.JTable taskHistoryTable;
    private javax.swing.JLabel taskInfoLbl;
    private javax.swing.JPanel taskInfoPanel;
    private javax.swing.JTextField taskNameField;
    private javax.swing.JLabel taskNameLbl;
    private javax.swing.JLabel taskStoryLabel;
    private javax.swing.JScrollPane taskStoryScroll;
    private javax.swing.JScrollPane taskdescriptionScroll;
    private javax.swing.JDialog tasksDialog;
    private javax.swing.JScrollPane tasksScroll;
    private javax.swing.JTable tasksTable;
    private javax.swing.JTextField usernameField;
    private javax.swing.JLabel usernameLbl;
    // End of variables declaration//GEN-END:variables
}
